一、Activity
    1.定义
        四大组件之一，是用户交互的界面。一般的来说一个用户交互界面对应一个activity。

    2.生命周期
        Activity从创建到销毁之间有多种状态，每一种状态对应一个生命周期方法。这些回调方法包括：
        onCreate()、onStart()、onResume()、onPause()、onStop()、onDestroy()。

        这些方法都是两两对立的：
            onCreate()和onDestroy()  ---------   创建和销毁
            onStart()和onStop()      ---------   可见与不可见
            onResume()和onPause()    ---------   可编辑和不可编辑

        (1)界面从创建到跳转到界面B，再从界面B返回，两个Activity的生命周期变化？
                A创建到可见过程。
            A：onCreate()->onStart()->onResume();
                A跳转到B，即B创建到可见过程，这时候A失去了焦点，处于不可编辑状态。B可见后，A就不可见了。
            A：onPause();
            B: onCreate()->onStart()->onResume();
            A: onStop();
                从B返回到A的过程。即B失去了焦点，处于不可编辑状态，重新进入到A可见，然后B不可见到销毁
            B：onPause();
            A：onRestart()->onStart()->onResume();
            B：onStop()->onDestroy();

        (2)界面从创建到跳转到界面B(B界面是透明主题的或者是Dialog形式的)，再从界面B返回，两个Activity的生命周期变化？
                 A创建到可见过程。
            A：onCreate()->onStart()->onResume();
                A跳转到B，即B创建到可见过程，这时候A失去了焦点，处于不可编辑状态。B可见后，A就不可见了。
            A：onPause();
            B: onCreate()->onStart()->onResume();
            A: onStop();
                从B返回到A的过程。即B失去了焦点，处于不可编辑状态，重新进入到A可见，然后B不可见到销毁
            B：onPause();
            A：onResume();   因为B是透明的或者是Dialog形式的，说明A还是可见的，所以不会调用onReStart()和onStart()了。
            B：onStop()->onDestroy();

        (3)创建界面A后，点击Home按键，再回到界面A，这是A的生命周期变化？
            创建A
        A：onCreate()->onStart()->onResume();
            点击Home键
        A：onPause->onStop();
            再次回到A
        A：onRestart()->onStart()->onResume();

        (4)两个Activity之间的跳转必定会执行的是哪几个生命周期方法？
            前一个activity的onPause()和后一个Activity的onResume();

        (5)横竖屏切换，Activity的生命周期变化？
           竖屏切横竖：onPause()->onStop()->onDestroy()->onCreate()->onStart()->onRestart()。
           横竖切竖屏：onPause()->onStop()->onDestroy()->onCreate()->onStart()->onRestart()。
           这两次切换都不会回调：onConfigurationChanged()方法。

           有的人说横屏切竖屏会打印两次相同的生命周期方法，但是我的测试是只有一次，具体原因
           没有深究，不知道是否与机型有关。

           如果在AndroidManifest.xml文件中设置该Activity的configChanges="orientation"时：
           竖屏切横竖：onPause()->onStop()->onDestroy()->onCreate()->onStart()->onRestart()。
                有些手机在竖屏切横屏的时候也不会打印生命周期方法，如P30，好像和机械有关。
           横竖切竖屏：什么都不打印。

           设置configChanges属性的目的是为了在切屏时不让Activity进行销毁和重建。
           这两次切换都会回调：onConfigurationChanged()方法。好像只要有orientation这个属性，
           就都会回调onConfigurationChanged()方法。

    3. onSaveInstanceState()和onRestoreInstanceState()会在什么时候回调?
        当系统“未经用户许可”准备让Activity变得失去焦点时()，onSaveInstanceState()会被系统调用，
        因为它必须要提供一个机会让用户能够保存数据(当然保不保存就是你自己的事情了)。如果我们是
        通过返回按钮返回上一个Activity，则这个Activity的 onSaveInstanceState()不会被回调，因为
        这个是用户自己选择的操作，不是系统原因。
        onSaveInstanceState()一般都是在onPause回调之后进行回调。
        以下几种情况的分析都遵循该原则：
        (1)长按Home键，选择运行其他的程序时。
        (2)按下电源按键（关闭屏幕显示）时。
        (3)从Activity A中启动一个新的Activity时。
        (4)屏幕方向切换时，例如从竖屏切换到横屏时。

        至于onRestoreInstanceState()方法，需要注意的是，onSaveInstanceState()和onRestoreInstanceState()
        “不一定”是成对的被调用的。onRestoreInstanceState()被调用的前提是，Activity A“确实”被系统销毁了。
        而如果仅仅是停留在有这种可能性的情况下，则该方法不会被调用，例如，当正在显示Activity A的时候，
        用户按下Home键回到主界面，然后用户紧接着又返回到activity A，这种情况下Activity A一般不会因为内存的
        原因被系统销毁，故Activity A的onRestoreInstanceState方法不会被执行。
        而横竖屏切换的时候Activity是真正的被系统销毁了，所以会调用onRestoreInstanceState()。
        onRestoreInstanceState()一般都是在onResume()回调之前进行回调。

    4. Activity的四种启动模式及应用场景
        (1)standard     标准启动模式(Activity的默认启动模式)
            每启动一个Activity，都会创建一个新的实例，不管栈中是否已经存在这个实例，每次都会创建的实例存放于栈顶。
            返回的时候，将这个Activity对应的实例出栈。

            应用场景：这个好像程序大多数都是默认用这个实例的。

        (2)singleTop    栈顶复用模式
            每启动一个Activity，如果该Activity对应的实例位于栈顶，则不会创建新的实例，直接复用当前Activity对应
            的实例，即不会走该Activity的onCreate()->onStart()，直接走该Activity的onPause()->onNewIntent()->onResume();
            如果该Activity对应的实例没有位于栈顶，则会创建新的实例。

            应用场景：系统推送通知栏。

        (3)singleTask   栈中复用模式
            每启动一个Activity，如果栈中已经存在该Activity对应的实例，则不会创建新的实例，并将它实例上面的Activity
            都出栈，直到该Activity位于栈顶，即不会走该Activity的onCreate()->onResume()；直接回调onIntent(),直接走
            该Activity的onRestart()->onStart()->onResume()；如果栈中不存在该Activity对应的实例，就会创建新的实例存
            放于栈顶。

            应用场景：程序模块逻辑入口，应用的主页面和登录页面(我们肯定不会让我们的主界面和登录页面被多次创建，而且
            在主界面或者登录页面退出应用程序是最好的选择)；
            WebView页面、扫一扫页面、购物页面、确认订单页面、付款页面等。

        (4)singleInstance   单一实例模式
            每启动一个Activity，都会将该Activity存放于单独的一个栈中，并且这个栈中只有该Activity一个实例，下次再启动
            这个Activity的时候，都不会创建新的实例，而是将以前创建的Activity从独立的栈中唤醒。执行流程和已经存在有实
            例的singleTask启动模式差不多，也直接回调onIntent(),直接走该Activity的onRestart()->onStart()->onResume()。

            应用场景：Launcher页面、电话页面、闹钟等系统应用 。


二、Service
    1.定义
        服务是一种可以在后台长时间运行而没有用户界面的应用组件，除非系统必须回收内存资源，否则系统不会停止或销毁服务。
        它是运行在主线程的。

    2.启动服务的两种方式
        startService()：调用者退出后服务仍然存在。只有调用stopService()服务才会退出。
        bindService()：调用者退出后服务也会跟着退出。即不调用unbindService()服务也会自动退出。

    3.Service的生命周期和启动方式有关
        (1)只是用startService()启动服务：
            onCreate()->onStartCommand()->onDestroy()。
        (2)只是用bindService()启动服务：
            onCreate()->onBind()->onUnBind()->onDestroy()。

    4.Service如何与Activity进行通信？
        (1)在Service中添加一个继承自Binder的内部类，并在内部类中添加相应的逻辑方法；然后在Service中的onBind()返回内部类
            Binder的实例；重写onServiceConnected()、onServiceDisconnected()方法时调用逻辑方法。
        (2)通过自定义接口进行交互。
        (3)通过BroadcastReceiver广播方式实现组件间的通信。
        (4)通过信使Messenger。

    5.Service中可以执行耗时操作吗？
        如果没有指定Service所运行的进程，Service和Activity一样都是默认运行在当前应用主线程的，它并不是创建了一个新的进程
        或创建了一个新的线程，它是依赖于应用程序主线程的，所以我们不能在Service中执行耗时操作，否则可能会引起ANR。
        如果我们需要在Service中执行耗时操作：
        (1)通过开启线程方式来执行。
        (2)使用AsyncTask异步任务。
        (3)使用IntentService异步管理服务。

    6.Service的onStartCommand()方法有几种返回值？
        (1)START_STICKY
            "粘性的"。如果Service被kill掉，保留Service的状态为开始状态，但不保留传递的Intent对象。随后系统会尝试重新创建
            Service,由于Service状态为开始状态，所以创建服务后一定会调用onStartCommand(Intent,int,int)方法，如果在此期间没有
            任何启动命令被传递到Service,那么参数 Intent 将为 null。
        (2)START_NOT_STICKY
            非粘性的。使用这个返回值时,如果在执行完 onStartCommand()后,服务被异常 kill 掉,系统不会自动重启该服务。
        (3)START_REDELIVER_INTENT
            重传 Intent。使用这个返回值时,如果在执行完 onStartCommand()后,服务被异常 kill 掉,系统会自动重启该服务,
            并将参数 Intent 的值传入。
        (4)START_STICKY_COMPATIBILITY
            START_STICKY 的兼容版本,但不保证服务被 kill 后一定能重启。

    7.Service 的 onRebind()方法在什么情况下会执行?
        如果在onUnbind()中返回true，onRebind()就会执行，否则不会执行。

    8.能在Service中弹吐司Toast么？
        可以。弹吐司需要的一个重要参数就是context，而Service本身就是Context的子类，所以在Service中弹吐司是没有任何问题的。

    9.一般会在什么情况下用到Service？
        一般长期在后台工作的任务都需要放到Service中去做。比如音乐播放、文件下载、大文件上传、定时关闭应用等功能，如果我们
        将这些功能放到Activity中去做，可能会因为Activity的生命周期导致这些功能不能实现。总的来说就是我们在Activity不能满足
        需求的情况下我们会考虑使用到Service。

    10.Activity如何与Service进行绑定，怎么在Activity中启动对应的Service？
        Activity通过bindService()方法跟Service来进行绑定，当绑定成功的时候Service会将代理对象通过接口回调给conn，这样我们就
        拿到了Service提供的服务代理对象。
        在Activity中可以通过startService()和bindService()启动服务。如果我们想获取Service的代理对象那么只能通过bindService()；
        如果仅仅是为了开启一个后台任务那么可以直接使用startService()。

    11.什么是IntentService？
        IntentService是Service的子类，是一个异步的，会自动停止的服务，很好解决了传统的Service中处理完耗时操作忘记停止并销毁
        Service的问题。

        源码分析：
        看了源码才知道，就是让用户可以在Service中进行的耗时操作而生的。IntentService继承了Service，并且在onCreate()方法中
        根据构造函数传进来的名字通过HandlerThread创建了线程，然后从HandlerThread中拿到当前线程的Looper，创建相应现场的对应
        的Handler。onStart()方法原来在Service中是在onStartCommand()方法中进行调用的，并且是空实现的方法。而在IntentService
        中重写了onStart()方法，并且通过Handler发送了一条带有onStart()方法中所有参数的消息，然后在自定义Handler的handleMessage()
        方法中处理消息，最后都统一由onHandlerIntent来进行处理，然后通过stopSelf停止处理完了的服务。

        还有一点，IntentService最好不要通过bindService来绑定服务，因为IntentService中onBind()是默认返回null，如果你执意要
        bindService() 来启动 IntentService，可能因为你想通过 Binder 或 Messenger 使得 IntentService 和 Activity 可以通信，
        这样那么 onHandleIntent() 不会被回调，相当于在你使用 Service 而不是 IntentService。

    12.IntentService和Service相比有什么优点？
        (1)我们不用在Service中手动开启线程，IntentService内部的onCreate()就已经通过HandlerThread默认开启了线程。
        (2)当操作完成后，我们不用手动的去停止Service。IntentService内部的Handler的handleMessage()方法中，当onHandleIntent()
            处理完成后，IntentService会调用stopSelf()自动停止服务。

    13.如何提高Service的优先级？(也就是让Service存活率变高)
        (1)在AndroidManifest.xml文件中对于intent-filter可以通过android:priority = “1000”这个属性设置最高优先级，1000是最高值，
            如果数字越小则优先级越低，同时实用于广播。
        (2)在onStartCommand() 里面调用 startForeground()方法把Service提升为前台进程级别，然后再onDestroy()里面要记得调用
            stopForeground()方法。
        (3)在onStartCommand方法，手动返回START_STICKY。当服务被异常kill掉，系统会尝试重启服务。
        (4)在Service的onDestroy()方法里发广播重启Service。
        (5)监听系统广播判断Service状态。比如手机重启、界面唤醒、应用状态改变等等监听并捕获到，然后判断我们的Service是否还存活。
        (6)Application加上Persistent属性。


三、BroadcastReceiver
    1.定义
    BroadcastReceiver是用于接收广播的组件，用于组件与组件之间的通信，可以跨进程传递。组件一般都要在AndroidManifest.xml中静态注册，
    但是只有广播接收者可以使用java代码的方法来动态注册。

    2.BroadcastReceiver的注册
        (1)静态注册
            在AndroidManifest.xml文件中进行注册。
        (2)动态注册
            动态注册需要在java代码中动态的指定广播并进行注册。动态注册要记得反注册。

        两种注册方式的区别：
            静态注册：BroadcastReceiver注册后常驻后台，不会随着其他组件的消亡而变化，即使应用被杀死了还是可以接收到广播。
                    这样的话不仅占用内存，而且会增加应用的耗电量。

            动态注册：BroadcastReceiver注册跟随组件的生命周期而产生变化，注册和注销的过程需要开发者自己手动完成，生命周期
                    灵活可控。一般在组件销毁时进行反注册。

        作为开发者必须要知道的是，随着Android系统的不断更新迭代，广播的发布规则也发生了一些变化。

        在Android 7.0(API 24)及以上的版本，将不再使用系统广播中的 ACTION_NEW_PICTURE和ACTION_NEW_VIDEO。
        在Android 7.0(API 24)及以上的版本，监听CONNECTIVITY_ACTION广播时，需要动态注册。
        从Android 8.0(API 26)开始，对于大部分隐式广播，不能在Manifest中声明receiver，如果需要使用隐式广播，需要使用动态注册。
        也可以在静态注册的基础上在发送广播的时候添加一些属性变成显式的广播，不过最好还是用动态注册。

    3.BroadcastReceiver的使用场景
        (1)同一应用中组件之间的通信。
        (2)不同应用中组件之间的通信。
        (3)系统与应用之间的通信。

    4.BroadcastReceiver的种类
        (1)普通广播
            广播被发送后，BroadcastReceiver之间是无顺序，完全异步的，各个Receiver之间无关联。无序广播无法通过abortBroadcast终止，
            也无法使用setResult和getResult来传递处理结果。

        (2)有序广播
            广播发送后会按照优先级顺序被不同的广播接收器接收，优先级可以通过intent-filter的android:priority属性来设置，定义范围为-1000~1000，
            数值越大，优先级越高（如果优先级相同，1. 发送广播的进程会优先接收 2. 先注册的Receiver先接收）。有序广播发送后，会被优先级最高的
            BroadCastReceiver接收，然后在处理完毕后依次被优先级较低的BroadCastReceiver接收，期间，BroadCastReceiver可以设置setResult将该广播
            的处理结果传递给下一个BroadCastReceiver，下一个Receiver通过getResult获取。有序广播被接收时，还可以通过abortBroadcast来终止，终止
            后，广播不会继续传递给其他Receiver。如：开发一个拦截短信的功能，我们将priority设置为1000，来最大限度的保证短信可以被我们的Receiver
            接收，在接收后，如果不想短信显示在系统短信列表中，我们可以abortBroadcast来终止传递，此时也就不会有短信提示音，也不会再短信收件箱中
            看到该短信。

        (3)粘性广播(基本废弃)。
            它与非粘性广播的区别是，在onReceiver中粘性广播不受10s限制（普通广播onReceiver在10s未处理完毕，会抛出ANR），粘性广播在10s后仍然存在，
            直至广播处理完毕。但需要注意的是，10s后，系统会将这个广播置为candidate状态，即可以被干掉的，当系统资源不足时，广播仍然可能会被丢弃。
            使用粘性广播需要android.Manifest.permission.BROADCAST_STICKY权限

        (4)本地广播(LocalBroadcastManager)

    5.BroadcastReceiver的实现机制
        Android中的广播使用了观察者模式：基于消息发布/订阅模式的事件驱动模型。
        广播模型中包含三个角色：
            消息发布者（广播发布者）
            消息中心（AMS，即Activity Manager Service）
            消息订阅者（广播接收者）
        (1)广播接受者通过Binder机制在AMS中注册监听
        (2)广播发布者通过Binder机制向AMS发送广播
        (3)AMS根据发送者的需求，在已注册表中获取到合适的广播接受者（根据Intent-filter，Permission）
        (4)AMS将广播发送给合适的广播接受者的消息循环队列中
        (5)广播接收者通过消息循环获取到广播并回调onReceive()

        整个广播发送与接收过程中，发送者与接收者是异步的，发送者不需要知道是否有接受者，也不需要知道接受者何时收到广播。

    6.LocalBroadcastManager的实现原理
        LocalBroadcastManager虽然使用和普通广播没有太大差别，但是原理却是完全不同。LocalBroadcastManager内部维护了
        mReceivers和mActions两个HashMap。
        mReceivers： 是接收器和IntentFilter的对应表，主要作用是方便在unregisterReceiver(…)取消注册，同时作为对象锁限
                     制注册接收器、发送广播、取消接收器注册等几个过程的并发访问。

        mActions： 以Action为 key，注册这个Action的BroadcastReceiver链表为 value。mActions 的主要作用是方便在广播发送
                    后快速得到可以接收它的BroadcastReceiver。

        在注册广播时，其实是在更新这两个Map。发送广播时，根据Action从mActions中取出ReceiverRecord列表，找出action匹配的广播，
        然后通过Handler发送消息，在Handler的handleMessage中，取出匹配的广播列表，依次回调onReceive方法。

    7.LocalBroadcastManager特点
        (1)本地广播只能在自身App内传播，不必担心泄漏隐私数据。
        (2)本地广播不允许其他App对你的App发送该广播，不必担心安全漏洞被利用。
        (3)本地广播比全局广播更高效。

    8. 发送的广播如果只想让指定的广播接收者接收，或者只想接收指定发送者发送的广播，这些该如何实现呢？
       如何发送给指定的广播接受者？
       (1)在发送者的AndroidManifest.xml文件中定义自定义权限；
       (2)在发送者发送广播的时候添加这个自定义权限。
       (3)在接收者的AndroidManifest.xml文件中声明这个自定义权限。

      这样一来就只有在广播接收者的应用中在AndroidManifest.xml中添加对应的权限，才能正常接收到该广播。

       如何接收指定发送者的广播？
       (1)在接收者的AndroidManifest.xml文件中定义自定义权限；
       (2)在接收者注册广播的时候添加这个自定义权限。
       (3)在发送者者的AndroidManifest.xml文件中声明这个自定义权限。

      这样一来接收者就只能接收来自具有该权限的应用发出的广播。要发送该广播，只需在发送者的AndroidManifest.xml中
      也声明使用该权限即可。

      说来说去就是通过自定义权限来控制广播的安全性问题。

    9. 注意事项
        (1)动态注册的广播，在不需要使用时或者载体即将销毁时进行注销，即每一个registerReceiver需要有一个对应的unregisterReceiver。
        (2)不要在广播接收器onReceive()中进行耗时操作，否则会引起ANR(10s)。
        (3)不要在广播接收器onReceive()中开启异步任务，否则因为其生命周期的结束会出现空线程，导致任务丢失或者出现ANR等情况。
        (4)耗时任务请开启service进行处理，且应当使用startService，而不应该使用bindService。因为onReceive()传下来的context是经过
            封装的context。
        (5)应用内的广播尽量使用LocalBroadcastManager，因为其使用Handler，较Broadcast的Binder机制开销更小，且安全性更高。
        (6)动态注册的广播优先度比静态注册高（当配置的优先级一致时），且可以控制其注册与注销，开销更小，所以能满足功能的情况下优先
            使用动态注册如果接受不到自己发送的广播，请注意是否是因为权限问题。


四、ContentProvider
    1.定义
        主要用于在不同的应用程序之间实现数据共享的组件，它提供了一套完整的机制，允许一个程序访问另一个程序中的数据，同时还能保证
        被访数据的安全性。

    2.Uri
        统一资源标识符，用来标识ContentProvider的数据，外界进程通过Uri找到对应的ContentProvider和其中的数据，再进行数据操作。

        自定义Uri： "content://com.bryanrady.optimization.MyProvider/user/1"

        这个Uri指向的资源是：
            名为 "com.bryanrady.optimization.MyProvider" 的ContentProvider中表名为user中的id为1的数据。如果没有后面的id，则指向
            user表中的所有数据。


        自定义Uri： schema + authorities + path + id

        schema:         content://
        authorities:    com.bryanrady.optimization.MyProvider
        path:           /user
        id :            1

        特别注意：URI模式存在匹配通配符 * ＃

        *   匹配任意长度的任何有效字符的字符串
            content://com.bryanrady.optimization.MyProvider/*
            表示匹配这个provider中的的任何内容

        ＃  匹配任意长度的数字字符的字符串
            content://com.bryanrady.optimization.MyProvider/#
            表示匹配这个provider中任意长度的数字字符的字符串

    3.为什么要设计ContentProvider这个组件？
        (1)封装。对数据进行封装，暴露统一的接口，使用者不必不必关心这些数据是在 DB ，XML 、Preferences 或者网络请求来的。当项目
            需求要改变数据来源时，使用的地方完全不需要修改。
        (2)跨进程共享数据。
        (3)数据通知更新机制。因为数据是在多个应用程序中共享的，当其中一个应用程序改变了这些共享数据的时候，它有责任通知其它应用
            程序，让它们知道共享数据被修改了，这样它们就可以作相应的处理。

    4.如何访问自定义的ContentProvider？
        通过ContentResolver来访问ContentProvider的数据，ContentResolver通过Context的getContentResolver()获得，然后根据ContentProvider
        暴露的Uri调用ContentResolver接口相应的CRUD方法，就可以调用到ContentProvider相应的CRUD方法并得到结果。

    5.ContentProvider和Sqlite有什么区别？
        (1)ContentProvider屏蔽了数据存储的细节，内部实现对用户完全透明，用户只需要关心操作数据的 uri 就可以了。
        (2)ContentProvider可以实现不同应用程序之间的共享。Sql虽然也有增删改查的方法, 但是sql只能查询本应用下的数据库。
        (3)ContentProvider 还可以去增删改查本地文件、xml文件的读取等。

    6.运行在主线程的 ContentProvider 为什么不会影响主线程的 UI 操作?
        ContentProvider 的 onCreate() 是运行在 UI 线程的，而 query() ，insert() ，delete() ，update() 是运行在线程池中的工作线程
        的，所以调用这向个方法并不会阻塞 ContentProvider 所在进程的主线程，但可能会阻塞调用者所在的进程的 UI 线程。
        所以，调用 ContentProvider 的操作仍然要放在子线程中去做。虽然直接的 CRUD 的操作是在工作线程的，但系统会让你的调用线程等
        待这个异步的操作完成，你才可以继续线程之前的工作。

五、Fragment

    1.定义
        Fragment 表示 Activity 中的行为或用户界面部分。您可以将多个片段组合在一个 Activity 中来构建多窗格 UI，以及在多个 Activity
        中重复使用某个片段。您可以将片段视为 Activity 的模块化组成部分，它具有自己的生命周期，能接收自己的输入事件，并且您可以在
        Activity 运行时添加或移除片段（有点像您可以在不同 Activity 中重复使用的“子 Activity”）。

    2.Fragment的生命周期
        onAttach()、onCreate()、onCreateView()、onActivityCreated()
        onStart()
        onResume()
        onPause()
        onStop()
        onDestroyView()、onDestroy()、onDetach()

        onAttach(Activity)：当Fragment与Activity发生关联时调用。与onDetach()相对应。
        onCreate()：        当Fragment创建的时候调用。与onDestroy()相对应。
        onCreateView()：    当Fragment创建视图的时候调用。与onDestroyView()相对应。
        onActivityCreated():当Activity的onCreate()回调的时候调用。

        注意：除了onCreateView()，其他的所有方法如果你重写了，必须调用父类对于该方法的实现，

    3.Fragment的使用

